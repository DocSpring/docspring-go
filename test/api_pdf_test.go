/*
DocSpring API

Testing PDFAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package docspring

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_docspring_PDFAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PDFAPIService AddFieldsToTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.PDFAPI.AddFieldsToTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService BatchGeneratePdfs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.BatchGeneratePdfs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService CombinePdfs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.CombinePdfs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService CombineSubmissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.CombineSubmissions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService CopyTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.PDFAPI.CopyTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService CreateCustomFileFromUpload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.CreateCustomFileFromUpload(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService CreateDataRequestEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dataRequestId string

		resp, httpRes, err := apiClient.PDFAPI.CreateDataRequestEvent(context.Background(), dataRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService CreateDataRequestToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dataRequestId string

		resp, httpRes, err := apiClient.PDFAPI.CreateDataRequestToken(context.Background(), dataRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService CreateFolder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.CreateFolder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService CreateHTMLTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.CreateHTMLTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService CreatePDFTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.CreatePDFTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService CreatePDFTemplateFromUpload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.CreatePDFTemplateFromUpload(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService DeleteFolder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folderId string

		resp, httpRes, err := apiClient.PDFAPI.DeleteFolder(context.Background(), folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService DeleteTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.PDFAPI.DeleteTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService ExpireCombinedSubmission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var combinedSubmissionId string

		resp, httpRes, err := apiClient.PDFAPI.ExpireCombinedSubmission(context.Background(), combinedSubmissionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService ExpireSubmission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var submissionId string

		resp, httpRes, err := apiClient.PDFAPI.ExpireSubmission(context.Background(), submissionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService GeneratePdf", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.PDFAPI.GeneratePdf(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService GeneratePdfForHtmlTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.PDFAPI.GeneratePdfForHtmlTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService GeneratePreview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var submissionId string

		resp, httpRes, err := apiClient.PDFAPI.GeneratePreview(context.Background(), submissionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService GetCombinedSubmission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var combinedSubmissionId string

		resp, httpRes, err := apiClient.PDFAPI.GetCombinedSubmission(context.Background(), combinedSubmissionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService GetDataRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dataRequestId string

		resp, httpRes, err := apiClient.PDFAPI.GetDataRequest(context.Background(), dataRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService GetFullTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.PDFAPI.GetFullTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService GetPresignUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.GetPresignUrl(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService GetSubmission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var submissionId string

		resp, httpRes, err := apiClient.PDFAPI.GetSubmission(context.Background(), submissionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService GetSubmissionBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var submissionBatchId string

		resp, httpRes, err := apiClient.PDFAPI.GetSubmissionBatch(context.Background(), submissionBatchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService GetTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.PDFAPI.GetTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService GetTemplateSchema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.PDFAPI.GetTemplateSchema(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService ListCombinedSubmissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.ListCombinedSubmissions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService ListFolders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.ListFolders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService ListSubmissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.ListSubmissions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService ListTemplateSubmissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.PDFAPI.ListTemplateSubmissions(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService ListTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.ListTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService MoveFolderToFolder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folderId string

		resp, httpRes, err := apiClient.PDFAPI.MoveFolderToFolder(context.Background(), folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService MoveTemplateToFolder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.PDFAPI.MoveTemplateToFolder(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService RenameFolder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folderId string

		resp, httpRes, err := apiClient.PDFAPI.RenameFolder(context.Background(), folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService TestAuthentication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PDFAPI.TestAuthentication(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService UpdateDataRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dataRequestId string

		resp, httpRes, err := apiClient.PDFAPI.UpdateDataRequest(context.Background(), dataRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PDFAPIService UpdateTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.PDFAPI.UpdateTemplate(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
