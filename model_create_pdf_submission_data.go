/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreatePdfSubmissionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePdfSubmissionData{}

// CreatePdfSubmissionData struct for CreatePdfSubmissionData
type CreatePdfSubmissionData struct {
	Data map[string]interface{} `json:"data"`
	DataRequests []CreateSubmissionDataRequestData `json:"data_requests,omitempty"`
	ExpiresIn *int32 `json:"expires_in,omitempty"`
	FieldOverrides map[string]interface{} `json:"field_overrides,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Password *string `json:"password,omitempty"`
	Test *bool `json:"test,omitempty"`
}

type _CreatePdfSubmissionData CreatePdfSubmissionData

// NewCreatePdfSubmissionData instantiates a new CreatePdfSubmissionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePdfSubmissionData(data map[string]interface{}) *CreatePdfSubmissionData {
	this := CreatePdfSubmissionData{}
	this.Data = data
	return &this
}

// NewCreatePdfSubmissionDataWithDefaults instantiates a new CreatePdfSubmissionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePdfSubmissionDataWithDefaults() *CreatePdfSubmissionData {
	this := CreatePdfSubmissionData{}
	return &this
}

// GetData returns the Data field value
func (o *CreatePdfSubmissionData) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CreatePdfSubmissionData) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *CreatePdfSubmissionData) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetDataRequests returns the DataRequests field value if set, zero value otherwise.
func (o *CreatePdfSubmissionData) GetDataRequests() []CreateSubmissionDataRequestData {
	if o == nil || IsNil(o.DataRequests) {
		var ret []CreateSubmissionDataRequestData
		return ret
	}
	return o.DataRequests
}

// GetDataRequestsOk returns a tuple with the DataRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePdfSubmissionData) GetDataRequestsOk() ([]CreateSubmissionDataRequestData, bool) {
	if o == nil || IsNil(o.DataRequests) {
		return nil, false
	}
	return o.DataRequests, true
}

// HasDataRequests returns a boolean if a field has been set.
func (o *CreatePdfSubmissionData) HasDataRequests() bool {
	if o != nil && !IsNil(o.DataRequests) {
		return true
	}

	return false
}

// SetDataRequests gets a reference to the given []CreateSubmissionDataRequestData and assigns it to the DataRequests field.
func (o *CreatePdfSubmissionData) SetDataRequests(v []CreateSubmissionDataRequestData) {
	o.DataRequests = v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *CreatePdfSubmissionData) GetExpiresIn() int32 {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret int32
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePdfSubmissionData) GetExpiresInOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *CreatePdfSubmissionData) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int32 and assigns it to the ExpiresIn field.
func (o *CreatePdfSubmissionData) SetExpiresIn(v int32) {
	o.ExpiresIn = &v
}

// GetFieldOverrides returns the FieldOverrides field value if set, zero value otherwise.
func (o *CreatePdfSubmissionData) GetFieldOverrides() map[string]interface{} {
	if o == nil || IsNil(o.FieldOverrides) {
		var ret map[string]interface{}
		return ret
	}
	return o.FieldOverrides
}

// GetFieldOverridesOk returns a tuple with the FieldOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePdfSubmissionData) GetFieldOverridesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FieldOverrides) {
		return map[string]interface{}{}, false
	}
	return o.FieldOverrides, true
}

// HasFieldOverrides returns a boolean if a field has been set.
func (o *CreatePdfSubmissionData) HasFieldOverrides() bool {
	if o != nil && !IsNil(o.FieldOverrides) {
		return true
	}

	return false
}

// SetFieldOverrides gets a reference to the given map[string]interface{} and assigns it to the FieldOverrides field.
func (o *CreatePdfSubmissionData) SetFieldOverrides(v map[string]interface{}) {
	o.FieldOverrides = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CreatePdfSubmissionData) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePdfSubmissionData) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CreatePdfSubmissionData) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *CreatePdfSubmissionData) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *CreatePdfSubmissionData) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePdfSubmissionData) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *CreatePdfSubmissionData) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *CreatePdfSubmissionData) SetPassword(v string) {
	o.Password = &v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *CreatePdfSubmissionData) GetTest() bool {
	if o == nil || IsNil(o.Test) {
		var ret bool
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePdfSubmissionData) GetTestOk() (*bool, bool) {
	if o == nil || IsNil(o.Test) {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *CreatePdfSubmissionData) HasTest() bool {
	if o != nil && !IsNil(o.Test) {
		return true
	}

	return false
}

// SetTest gets a reference to the given bool and assigns it to the Test field.
func (o *CreatePdfSubmissionData) SetTest(v bool) {
	o.Test = &v
}

func (o CreatePdfSubmissionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePdfSubmissionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.DataRequests) {
		toSerialize["data_requests"] = o.DataRequests
	}
	if !IsNil(o.ExpiresIn) {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	if !IsNil(o.FieldOverrides) {
		toSerialize["field_overrides"] = o.FieldOverrides
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Test) {
		toSerialize["test"] = o.Test
	}
	return toSerialize, nil
}

func (o *CreatePdfSubmissionData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePdfSubmissionData := _CreatePdfSubmissionData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreatePdfSubmissionData)

	if err != nil {
		return err
	}

	*o = CreatePdfSubmissionData(varCreatePdfSubmissionData)

	return err
}

type NullableCreatePdfSubmissionData struct {
	value *CreatePdfSubmissionData
	isSet bool
}

func (v NullableCreatePdfSubmissionData) Get() *CreatePdfSubmissionData {
	return v.value
}

func (v *NullableCreatePdfSubmissionData) Set(val *CreatePdfSubmissionData) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePdfSubmissionData) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePdfSubmissionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePdfSubmissionData(val *CreatePdfSubmissionData) *NullableCreatePdfSubmissionData {
	return &NullableCreatePdfSubmissionData{value: val, isSet: true}
}

func (v NullableCreatePdfSubmissionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePdfSubmissionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


