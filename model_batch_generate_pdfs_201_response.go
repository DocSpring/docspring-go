/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BatchGeneratePdfs201Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchGeneratePdfs201Response{}

// BatchGeneratePdfs201Response struct for BatchGeneratePdfs201Response
type BatchGeneratePdfs201Response struct {
	Status string `json:"status"`
	Error *string `json:"error,omitempty"`
	Errors []string `json:"errors,omitempty"`
	SubmissionBatch SubmissionBatch `json:"submission_batch"`
	Submissions []map[string]interface{} `json:"submissions"`
}

type _BatchGeneratePdfs201Response BatchGeneratePdfs201Response

// NewBatchGeneratePdfs201Response instantiates a new BatchGeneratePdfs201Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchGeneratePdfs201Response(status string, submissionBatch SubmissionBatch, submissions []map[string]interface{}) *BatchGeneratePdfs201Response {
	this := BatchGeneratePdfs201Response{}
	this.Status = status
	this.SubmissionBatch = submissionBatch
	this.Submissions = submissions
	return &this
}

// NewBatchGeneratePdfs201ResponseWithDefaults instantiates a new BatchGeneratePdfs201Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchGeneratePdfs201ResponseWithDefaults() *BatchGeneratePdfs201Response {
	this := BatchGeneratePdfs201Response{}
	return &this
}

// GetStatus returns the Status field value
func (o *BatchGeneratePdfs201Response) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BatchGeneratePdfs201Response) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BatchGeneratePdfs201Response) SetStatus(v string) {
	o.Status = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *BatchGeneratePdfs201Response) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchGeneratePdfs201Response) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *BatchGeneratePdfs201Response) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *BatchGeneratePdfs201Response) SetError(v string) {
	o.Error = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *BatchGeneratePdfs201Response) GetErrors() []string {
	if o == nil || IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchGeneratePdfs201Response) GetErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *BatchGeneratePdfs201Response) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *BatchGeneratePdfs201Response) SetErrors(v []string) {
	o.Errors = v
}

// GetSubmissionBatch returns the SubmissionBatch field value
func (o *BatchGeneratePdfs201Response) GetSubmissionBatch() SubmissionBatch {
	if o == nil {
		var ret SubmissionBatch
		return ret
	}

	return o.SubmissionBatch
}

// GetSubmissionBatchOk returns a tuple with the SubmissionBatch field value
// and a boolean to check if the value has been set.
func (o *BatchGeneratePdfs201Response) GetSubmissionBatchOk() (*SubmissionBatch, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubmissionBatch, true
}

// SetSubmissionBatch sets field value
func (o *BatchGeneratePdfs201Response) SetSubmissionBatch(v SubmissionBatch) {
	o.SubmissionBatch = v
}

// GetSubmissions returns the Submissions field value
func (o *BatchGeneratePdfs201Response) GetSubmissions() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Submissions
}

// GetSubmissionsOk returns a tuple with the Submissions field value
// and a boolean to check if the value has been set.
func (o *BatchGeneratePdfs201Response) GetSubmissionsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Submissions, true
}

// SetSubmissions sets field value
func (o *BatchGeneratePdfs201Response) SetSubmissions(v []map[string]interface{}) {
	o.Submissions = v
}

func (o BatchGeneratePdfs201Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchGeneratePdfs201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	toSerialize["submission_batch"] = o.SubmissionBatch
	toSerialize["submissions"] = o.Submissions
	return toSerialize, nil
}

func (o *BatchGeneratePdfs201Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"submission_batch",
		"submissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchGeneratePdfs201Response := _BatchGeneratePdfs201Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatchGeneratePdfs201Response)

	if err != nil {
		return err
	}

	*o = BatchGeneratePdfs201Response(varBatchGeneratePdfs201Response)

	return err
}

type NullableBatchGeneratePdfs201Response struct {
	value *BatchGeneratePdfs201Response
	isSet bool
}

func (v NullableBatchGeneratePdfs201Response) Get() *BatchGeneratePdfs201Response {
	return v.value
}

func (v *NullableBatchGeneratePdfs201Response) Set(val *BatchGeneratePdfs201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchGeneratePdfs201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchGeneratePdfs201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchGeneratePdfs201Response(val *BatchGeneratePdfs201Response) *NullableBatchGeneratePdfs201Response {
	return &NullableBatchGeneratePdfs201Response{value: val, isSet: true}
}

func (v NullableBatchGeneratePdfs201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchGeneratePdfs201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


