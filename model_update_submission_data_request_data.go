/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
)

// checks if the UpdateSubmissionDataRequestData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSubmissionDataRequestData{}

// UpdateSubmissionDataRequestData struct for UpdateSubmissionDataRequestData
type UpdateSubmissionDataRequestData struct {
	AuthType *string `json:"auth_type,omitempty"`
	Fields []string `json:"fields,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Order *int32 `json:"order,omitempty"`
}

// NewUpdateSubmissionDataRequestData instantiates a new UpdateSubmissionDataRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSubmissionDataRequestData() *UpdateSubmissionDataRequestData {
	this := UpdateSubmissionDataRequestData{}
	return &this
}

// NewUpdateSubmissionDataRequestDataWithDefaults instantiates a new UpdateSubmissionDataRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSubmissionDataRequestDataWithDefaults() *UpdateSubmissionDataRequestData {
	this := UpdateSubmissionDataRequestData{}
	return &this
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *UpdateSubmissionDataRequestData) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubmissionDataRequestData) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *UpdateSubmissionDataRequestData) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *UpdateSubmissionDataRequestData) SetAuthType(v string) {
	o.AuthType = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *UpdateSubmissionDataRequestData) GetFields() []string {
	if o == nil || IsNil(o.Fields) {
		var ret []string
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubmissionDataRequestData) GetFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *UpdateSubmissionDataRequestData) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []string and assigns it to the Fields field.
func (o *UpdateSubmissionDataRequestData) SetFields(v []string) {
	o.Fields = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *UpdateSubmissionDataRequestData) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubmissionDataRequestData) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *UpdateSubmissionDataRequestData) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *UpdateSubmissionDataRequestData) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *UpdateSubmissionDataRequestData) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubmissionDataRequestData) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *UpdateSubmissionDataRequestData) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *UpdateSubmissionDataRequestData) SetOrder(v int32) {
	o.Order = &v
}

func (o UpdateSubmissionDataRequestData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSubmissionDataRequestData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return toSerialize, nil
}

type NullableUpdateSubmissionDataRequestData struct {
	value *UpdateSubmissionDataRequestData
	isSet bool
}

func (v NullableUpdateSubmissionDataRequestData) Get() *UpdateSubmissionDataRequestData {
	return v.value
}

func (v *NullableUpdateSubmissionDataRequestData) Set(val *UpdateSubmissionDataRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSubmissionDataRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSubmissionDataRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSubmissionDataRequestData(val *UpdateSubmissionDataRequestData) *NullableUpdateSubmissionDataRequestData {
	return &NullableUpdateSubmissionDataRequestData{value: val, isSet: true}
}

func (v NullableUpdateSubmissionDataRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSubmissionDataRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


