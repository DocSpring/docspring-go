/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateHtmlTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateHtmlTemplate{}

// UpdateHtmlTemplate struct for UpdateHtmlTemplate
type UpdateHtmlTemplate struct {
	Template map[string]interface{} `json:"template"`
}

type _UpdateHtmlTemplate UpdateHtmlTemplate

// NewUpdateHtmlTemplate instantiates a new UpdateHtmlTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateHtmlTemplate(template map[string]interface{}) *UpdateHtmlTemplate {
	this := UpdateHtmlTemplate{}
	this.Template = template
	return &this
}

// NewUpdateHtmlTemplateWithDefaults instantiates a new UpdateHtmlTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateHtmlTemplateWithDefaults() *UpdateHtmlTemplate {
	this := UpdateHtmlTemplate{}
	return &this
}

// GetTemplate returns the Template field value
func (o *UpdateHtmlTemplate) GetTemplate() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *UpdateHtmlTemplate) GetTemplateOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Template, true
}

// SetTemplate sets field value
func (o *UpdateHtmlTemplate) SetTemplate(v map[string]interface{}) {
	o.Template = v
}

func (o UpdateHtmlTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateHtmlTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["template"] = o.Template
	return toSerialize, nil
}

func (o *UpdateHtmlTemplate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"template",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateHtmlTemplate := _UpdateHtmlTemplate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateHtmlTemplate)

	if err != nil {
		return err
	}

	*o = UpdateHtmlTemplate(varUpdateHtmlTemplate)

	return err
}

type NullableUpdateHtmlTemplate struct {
	value *UpdateHtmlTemplate
	isSet bool
}

func (v NullableUpdateHtmlTemplate) Get() *UpdateHtmlTemplate {
	return v.value
}

func (v *NullableUpdateHtmlTemplate) Set(val *UpdateHtmlTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateHtmlTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateHtmlTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateHtmlTemplate(val *UpdateHtmlTemplate) *NullableUpdateHtmlTemplate {
	return &NullableUpdateHtmlTemplate{value: val, isSet: true}
}

func (v NullableUpdateHtmlTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateHtmlTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


