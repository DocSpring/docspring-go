/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TemplateAddFieldsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateAddFieldsResponse{}

// TemplateAddFieldsResponse struct for TemplateAddFieldsResponse
type TemplateAddFieldsResponse struct {
	Status string `json:"status"`
	Errors []string `json:"errors,omitempty"`
	NewFieldIds []int32 `json:"new_field_ids,omitempty"`
}

type _TemplateAddFieldsResponse TemplateAddFieldsResponse

// NewTemplateAddFieldsResponse instantiates a new TemplateAddFieldsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateAddFieldsResponse(status string) *TemplateAddFieldsResponse {
	this := TemplateAddFieldsResponse{}
	this.Status = status
	return &this
}

// NewTemplateAddFieldsResponseWithDefaults instantiates a new TemplateAddFieldsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateAddFieldsResponseWithDefaults() *TemplateAddFieldsResponse {
	this := TemplateAddFieldsResponse{}
	return &this
}

// GetStatus returns the Status field value
func (o *TemplateAddFieldsResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TemplateAddFieldsResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TemplateAddFieldsResponse) SetStatus(v string) {
	o.Status = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *TemplateAddFieldsResponse) GetErrors() []string {
	if o == nil || IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAddFieldsResponse) GetErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *TemplateAddFieldsResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *TemplateAddFieldsResponse) SetErrors(v []string) {
	o.Errors = v
}

// GetNewFieldIds returns the NewFieldIds field value if set, zero value otherwise.
func (o *TemplateAddFieldsResponse) GetNewFieldIds() []int32 {
	if o == nil || IsNil(o.NewFieldIds) {
		var ret []int32
		return ret
	}
	return o.NewFieldIds
}

// GetNewFieldIdsOk returns a tuple with the NewFieldIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAddFieldsResponse) GetNewFieldIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.NewFieldIds) {
		return nil, false
	}
	return o.NewFieldIds, true
}

// HasNewFieldIds returns a boolean if a field has been set.
func (o *TemplateAddFieldsResponse) HasNewFieldIds() bool {
	if o != nil && !IsNil(o.NewFieldIds) {
		return true
	}

	return false
}

// SetNewFieldIds gets a reference to the given []int32 and assigns it to the NewFieldIds field.
func (o *TemplateAddFieldsResponse) SetNewFieldIds(v []int32) {
	o.NewFieldIds = v
}

func (o TemplateAddFieldsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateAddFieldsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.NewFieldIds) {
		toSerialize["new_field_ids"] = o.NewFieldIds
	}
	return toSerialize, nil
}

func (o *TemplateAddFieldsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTemplateAddFieldsResponse := _TemplateAddFieldsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTemplateAddFieldsResponse)

	if err != nil {
		return err
	}

	*o = TemplateAddFieldsResponse(varTemplateAddFieldsResponse)

	return err
}

type NullableTemplateAddFieldsResponse struct {
	value *TemplateAddFieldsResponse
	isSet bool
}

func (v NullableTemplateAddFieldsResponse) Get() *TemplateAddFieldsResponse {
	return v.value
}

func (v *NullableTemplateAddFieldsResponse) Set(val *TemplateAddFieldsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateAddFieldsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateAddFieldsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateAddFieldsResponse(val *TemplateAddFieldsResponse) *NullableTemplateAddFieldsResponse {
	return &NullableTemplateAddFieldsResponse{value: val, isSet: true}
}

func (v NullableTemplateAddFieldsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateAddFieldsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


