/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateFolderData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateFolderData{}

// CreateFolderData struct for CreateFolderData
type CreateFolderData struct {
	Folder map[string]interface{} `json:"folder"`
}

type _CreateFolderData CreateFolderData

// NewCreateFolderData instantiates a new CreateFolderData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFolderData(folder map[string]interface{}) *CreateFolderData {
	this := CreateFolderData{}
	this.Folder = folder
	return &this
}

// NewCreateFolderDataWithDefaults instantiates a new CreateFolderData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFolderDataWithDefaults() *CreateFolderData {
	this := CreateFolderData{}
	return &this
}

// GetFolder returns the Folder field value
func (o *CreateFolderData) GetFolder() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Folder
}

// GetFolderOk returns a tuple with the Folder field value
// and a boolean to check if the value has been set.
func (o *CreateFolderData) GetFolderOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Folder, true
}

// SetFolder sets field value
func (o *CreateFolderData) SetFolder(v map[string]interface{}) {
	o.Folder = v
}

func (o CreateFolderData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateFolderData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["folder"] = o.Folder
	return toSerialize, nil
}

func (o *CreateFolderData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"folder",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateFolderData := _CreateFolderData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateFolderData)

	if err != nil {
		return err
	}

	*o = CreateFolderData(varCreateFolderData)

	return err
}

type NullableCreateFolderData struct {
	value *CreateFolderData
	isSet bool
}

func (v NullableCreateFolderData) Get() *CreateFolderData {
	return v.value
}

func (v *NullableCreateFolderData) Set(val *CreateFolderData) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFolderData) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFolderData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFolderData(val *CreateFolderData) *NullableCreateFolderData {
	return &NullableCreateFolderData{value: val, isSet: true}
}

func (v NullableCreateFolderData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFolderData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


