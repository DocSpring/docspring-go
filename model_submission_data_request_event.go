/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubmissionDataRequestEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmissionDataRequestEvent{}

// SubmissionDataRequestEvent struct for SubmissionDataRequestEvent
type SubmissionDataRequestEvent struct {
	Id NullableString `json:"id"`
	SubmissionId NullableString `json:"submission_id"`
	SubmissionDataRequestId NullableString `json:"submission_data_request_id"`
	EventType string `json:"event_type"`
	MessageType string `json:"message_type"`
	MessageRecipient NullableString `json:"message_recipient"`
	OccurredAt NullableString `json:"occurred_at"`
}

type _SubmissionDataRequestEvent SubmissionDataRequestEvent

// NewSubmissionDataRequestEvent instantiates a new SubmissionDataRequestEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmissionDataRequestEvent(id NullableString, submissionId NullableString, submissionDataRequestId NullableString, eventType string, messageType string, messageRecipient NullableString, occurredAt NullableString) *SubmissionDataRequestEvent {
	this := SubmissionDataRequestEvent{}
	this.Id = id
	this.SubmissionId = submissionId
	this.SubmissionDataRequestId = submissionDataRequestId
	this.EventType = eventType
	this.MessageType = messageType
	this.MessageRecipient = messageRecipient
	this.OccurredAt = occurredAt
	return &this
}

// NewSubmissionDataRequestEventWithDefaults instantiates a new SubmissionDataRequestEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmissionDataRequestEventWithDefaults() *SubmissionDataRequestEvent {
	this := SubmissionDataRequestEvent{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SubmissionDataRequestEvent) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmissionDataRequestEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *SubmissionDataRequestEvent) SetId(v string) {
	o.Id.Set(&v)
}

// GetSubmissionId returns the SubmissionId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SubmissionDataRequestEvent) GetSubmissionId() string {
	if o == nil || o.SubmissionId.Get() == nil {
		var ret string
		return ret
	}

	return *o.SubmissionId.Get()
}

// GetSubmissionIdOk returns a tuple with the SubmissionId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmissionDataRequestEvent) GetSubmissionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubmissionId.Get(), o.SubmissionId.IsSet()
}

// SetSubmissionId sets field value
func (o *SubmissionDataRequestEvent) SetSubmissionId(v string) {
	o.SubmissionId.Set(&v)
}

// GetSubmissionDataRequestId returns the SubmissionDataRequestId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SubmissionDataRequestEvent) GetSubmissionDataRequestId() string {
	if o == nil || o.SubmissionDataRequestId.Get() == nil {
		var ret string
		return ret
	}

	return *o.SubmissionDataRequestId.Get()
}

// GetSubmissionDataRequestIdOk returns a tuple with the SubmissionDataRequestId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmissionDataRequestEvent) GetSubmissionDataRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubmissionDataRequestId.Get(), o.SubmissionDataRequestId.IsSet()
}

// SetSubmissionDataRequestId sets field value
func (o *SubmissionDataRequestEvent) SetSubmissionDataRequestId(v string) {
	o.SubmissionDataRequestId.Set(&v)
}

// GetEventType returns the EventType field value
func (o *SubmissionDataRequestEvent) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *SubmissionDataRequestEvent) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *SubmissionDataRequestEvent) SetEventType(v string) {
	o.EventType = v
}

// GetMessageType returns the MessageType field value
func (o *SubmissionDataRequestEvent) GetMessageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value
// and a boolean to check if the value has been set.
func (o *SubmissionDataRequestEvent) GetMessageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageType, true
}

// SetMessageType sets field value
func (o *SubmissionDataRequestEvent) SetMessageType(v string) {
	o.MessageType = v
}

// GetMessageRecipient returns the MessageRecipient field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SubmissionDataRequestEvent) GetMessageRecipient() string {
	if o == nil || o.MessageRecipient.Get() == nil {
		var ret string
		return ret
	}

	return *o.MessageRecipient.Get()
}

// GetMessageRecipientOk returns a tuple with the MessageRecipient field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmissionDataRequestEvent) GetMessageRecipientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessageRecipient.Get(), o.MessageRecipient.IsSet()
}

// SetMessageRecipient sets field value
func (o *SubmissionDataRequestEvent) SetMessageRecipient(v string) {
	o.MessageRecipient.Set(&v)
}

// GetOccurredAt returns the OccurredAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SubmissionDataRequestEvent) GetOccurredAt() string {
	if o == nil || o.OccurredAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.OccurredAt.Get()
}

// GetOccurredAtOk returns a tuple with the OccurredAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmissionDataRequestEvent) GetOccurredAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OccurredAt.Get(), o.OccurredAt.IsSet()
}

// SetOccurredAt sets field value
func (o *SubmissionDataRequestEvent) SetOccurredAt(v string) {
	o.OccurredAt.Set(&v)
}

func (o SubmissionDataRequestEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmissionDataRequestEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	toSerialize["submission_id"] = o.SubmissionId.Get()
	toSerialize["submission_data_request_id"] = o.SubmissionDataRequestId.Get()
	toSerialize["event_type"] = o.EventType
	toSerialize["message_type"] = o.MessageType
	toSerialize["message_recipient"] = o.MessageRecipient.Get()
	toSerialize["occurred_at"] = o.OccurredAt.Get()
	return toSerialize, nil
}

func (o *SubmissionDataRequestEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"submission_id",
		"submission_data_request_id",
		"event_type",
		"message_type",
		"message_recipient",
		"occurred_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmissionDataRequestEvent := _SubmissionDataRequestEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubmissionDataRequestEvent)

	if err != nil {
		return err
	}

	*o = SubmissionDataRequestEvent(varSubmissionDataRequestEvent)

	return err
}

type NullableSubmissionDataRequestEvent struct {
	value *SubmissionDataRequestEvent
	isSet bool
}

func (v NullableSubmissionDataRequestEvent) Get() *SubmissionDataRequestEvent {
	return v.value
}

func (v *NullableSubmissionDataRequestEvent) Set(val *SubmissionDataRequestEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmissionDataRequestEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmissionDataRequestEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmissionDataRequestEvent(val *SubmissionDataRequestEvent) *NullableSubmissionDataRequestEvent {
	return &NullableSubmissionDataRequestEvent{value: val, isSet: true}
}

func (v NullableSubmissionDataRequestEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmissionDataRequestEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


