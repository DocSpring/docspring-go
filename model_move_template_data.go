/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MoveTemplateData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveTemplateData{}

// MoveTemplateData struct for MoveTemplateData
type MoveTemplateData struct {
	ParentFolderId string `json:"parent_folder_id"`
}

type _MoveTemplateData MoveTemplateData

// NewMoveTemplateData instantiates a new MoveTemplateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveTemplateData(parentFolderId string) *MoveTemplateData {
	this := MoveTemplateData{}
	this.ParentFolderId = parentFolderId
	return &this
}

// NewMoveTemplateDataWithDefaults instantiates a new MoveTemplateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveTemplateDataWithDefaults() *MoveTemplateData {
	this := MoveTemplateData{}
	return &this
}

// GetParentFolderId returns the ParentFolderId field value
func (o *MoveTemplateData) GetParentFolderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentFolderId
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value
// and a boolean to check if the value has been set.
func (o *MoveTemplateData) GetParentFolderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentFolderId, true
}

// SetParentFolderId sets field value
func (o *MoveTemplateData) SetParentFolderId(v string) {
	o.ParentFolderId = v
}

func (o MoveTemplateData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveTemplateData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["parent_folder_id"] = o.ParentFolderId
	return toSerialize, nil
}

func (o *MoveTemplateData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parent_folder_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMoveTemplateData := _MoveTemplateData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMoveTemplateData)

	if err != nil {
		return err
	}

	*o = MoveTemplateData(varMoveTemplateData)

	return err
}

type NullableMoveTemplateData struct {
	value *MoveTemplateData
	isSet bool
}

func (v NullableMoveTemplateData) Get() *MoveTemplateData {
	return v.value
}

func (v *NullableMoveTemplateData) Set(val *MoveTemplateData) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveTemplateData) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveTemplateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveTemplateData(val *MoveTemplateData) *NullableMoveTemplateData {
	return &NullableMoveTemplateData{value: val, isSet: true}
}

func (v NullableMoveTemplateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveTemplateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


