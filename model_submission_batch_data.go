/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubmissionBatchData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmissionBatchData{}

// SubmissionBatchData struct for SubmissionBatchData
type SubmissionBatchData struct {
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Submissions []map[string]interface{} `json:"submissions"`
	Test *bool `json:"test,omitempty"`
}

type _SubmissionBatchData SubmissionBatchData

// NewSubmissionBatchData instantiates a new SubmissionBatchData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmissionBatchData(submissions []map[string]interface{}) *SubmissionBatchData {
	this := SubmissionBatchData{}
	this.Submissions = submissions
	return &this
}

// NewSubmissionBatchDataWithDefaults instantiates a new SubmissionBatchData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmissionBatchDataWithDefaults() *SubmissionBatchData {
	this := SubmissionBatchData{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SubmissionBatchData) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBatchData) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SubmissionBatchData) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *SubmissionBatchData) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetSubmissions returns the Submissions field value
func (o *SubmissionBatchData) GetSubmissions() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Submissions
}

// GetSubmissionsOk returns a tuple with the Submissions field value
// and a boolean to check if the value has been set.
func (o *SubmissionBatchData) GetSubmissionsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Submissions, true
}

// SetSubmissions sets field value
func (o *SubmissionBatchData) SetSubmissions(v []map[string]interface{}) {
	o.Submissions = v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *SubmissionBatchData) GetTest() bool {
	if o == nil || IsNil(o.Test) {
		var ret bool
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBatchData) GetTestOk() (*bool, bool) {
	if o == nil || IsNil(o.Test) {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *SubmissionBatchData) HasTest() bool {
	if o != nil && !IsNil(o.Test) {
		return true
	}

	return false
}

// SetTest gets a reference to the given bool and assigns it to the Test field.
func (o *SubmissionBatchData) SetTest(v bool) {
	o.Test = &v
}

func (o SubmissionBatchData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmissionBatchData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["submissions"] = o.Submissions
	if !IsNil(o.Test) {
		toSerialize["test"] = o.Test
	}
	return toSerialize, nil
}

func (o *SubmissionBatchData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"submissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmissionBatchData := _SubmissionBatchData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubmissionBatchData)

	if err != nil {
		return err
	}

	*o = SubmissionBatchData(varSubmissionBatchData)

	return err
}

type NullableSubmissionBatchData struct {
	value *SubmissionBatchData
	isSet bool
}

func (v NullableSubmissionBatchData) Get() *SubmissionBatchData {
	return v.value
}

func (v *NullableSubmissionBatchData) Set(val *SubmissionBatchData) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmissionBatchData) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmissionBatchData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmissionBatchData(val *SubmissionBatchData) *NullableSubmissionBatchData {
	return &NullableSubmissionBatchData{value: val, isSet: true}
}

func (v NullableSubmissionBatchData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmissionBatchData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


