/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubmissionBatchWithSubmissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmissionBatchWithSubmissions{}

// SubmissionBatchWithSubmissions struct for SubmissionBatchWithSubmissions
type SubmissionBatchWithSubmissions struct {
	Id NullableString `json:"id"`
	State string `json:"state"`
	Metadata map[string]interface{} `json:"metadata"`
	ProcessedAt NullableString `json:"processed_at"`
	TotalCount int32 `json:"total_count"`
	PendingCount int32 `json:"pending_count"`
	ErrorCount int32 `json:"error_count"`
	CompletionPercentage float32 `json:"completion_percentage"`
	Submissions []SubmissionPreview `json:"submissions,omitempty"`
}

type _SubmissionBatchWithSubmissions SubmissionBatchWithSubmissions

// NewSubmissionBatchWithSubmissions instantiates a new SubmissionBatchWithSubmissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmissionBatchWithSubmissions(id NullableString, state string, metadata map[string]interface{}, processedAt NullableString, totalCount int32, pendingCount int32, errorCount int32, completionPercentage float32) *SubmissionBatchWithSubmissions {
	this := SubmissionBatchWithSubmissions{}
	this.Id = id
	this.State = state
	this.Metadata = metadata
	this.ProcessedAt = processedAt
	this.TotalCount = totalCount
	this.PendingCount = pendingCount
	this.ErrorCount = errorCount
	this.CompletionPercentage = completionPercentage
	return &this
}

// NewSubmissionBatchWithSubmissionsWithDefaults instantiates a new SubmissionBatchWithSubmissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmissionBatchWithSubmissionsWithDefaults() *SubmissionBatchWithSubmissions {
	this := SubmissionBatchWithSubmissions{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SubmissionBatchWithSubmissions) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmissionBatchWithSubmissions) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *SubmissionBatchWithSubmissions) SetId(v string) {
	o.Id.Set(&v)
}

// GetState returns the State field value
func (o *SubmissionBatchWithSubmissions) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SubmissionBatchWithSubmissions) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SubmissionBatchWithSubmissions) SetState(v string) {
	o.State = v
}

// GetMetadata returns the Metadata field value
func (o *SubmissionBatchWithSubmissions) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *SubmissionBatchWithSubmissions) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *SubmissionBatchWithSubmissions) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetProcessedAt returns the ProcessedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SubmissionBatchWithSubmissions) GetProcessedAt() string {
	if o == nil || o.ProcessedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.ProcessedAt.Get()
}

// GetProcessedAtOk returns a tuple with the ProcessedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmissionBatchWithSubmissions) GetProcessedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessedAt.Get(), o.ProcessedAt.IsSet()
}

// SetProcessedAt sets field value
func (o *SubmissionBatchWithSubmissions) SetProcessedAt(v string) {
	o.ProcessedAt.Set(&v)
}

// GetTotalCount returns the TotalCount field value
func (o *SubmissionBatchWithSubmissions) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *SubmissionBatchWithSubmissions) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *SubmissionBatchWithSubmissions) SetTotalCount(v int32) {
	o.TotalCount = v
}

// GetPendingCount returns the PendingCount field value
func (o *SubmissionBatchWithSubmissions) GetPendingCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PendingCount
}

// GetPendingCountOk returns a tuple with the PendingCount field value
// and a boolean to check if the value has been set.
func (o *SubmissionBatchWithSubmissions) GetPendingCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingCount, true
}

// SetPendingCount sets field value
func (o *SubmissionBatchWithSubmissions) SetPendingCount(v int32) {
	o.PendingCount = v
}

// GetErrorCount returns the ErrorCount field value
func (o *SubmissionBatchWithSubmissions) GetErrorCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ErrorCount
}

// GetErrorCountOk returns a tuple with the ErrorCount field value
// and a boolean to check if the value has been set.
func (o *SubmissionBatchWithSubmissions) GetErrorCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCount, true
}

// SetErrorCount sets field value
func (o *SubmissionBatchWithSubmissions) SetErrorCount(v int32) {
	o.ErrorCount = v
}

// GetCompletionPercentage returns the CompletionPercentage field value
func (o *SubmissionBatchWithSubmissions) GetCompletionPercentage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CompletionPercentage
}

// GetCompletionPercentageOk returns a tuple with the CompletionPercentage field value
// and a boolean to check if the value has been set.
func (o *SubmissionBatchWithSubmissions) GetCompletionPercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletionPercentage, true
}

// SetCompletionPercentage sets field value
func (o *SubmissionBatchWithSubmissions) SetCompletionPercentage(v float32) {
	o.CompletionPercentage = v
}

// GetSubmissions returns the Submissions field value if set, zero value otherwise.
func (o *SubmissionBatchWithSubmissions) GetSubmissions() []SubmissionPreview {
	if o == nil || IsNil(o.Submissions) {
		var ret []SubmissionPreview
		return ret
	}
	return o.Submissions
}

// GetSubmissionsOk returns a tuple with the Submissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBatchWithSubmissions) GetSubmissionsOk() ([]SubmissionPreview, bool) {
	if o == nil || IsNil(o.Submissions) {
		return nil, false
	}
	return o.Submissions, true
}

// HasSubmissions returns a boolean if a field has been set.
func (o *SubmissionBatchWithSubmissions) HasSubmissions() bool {
	if o != nil && !IsNil(o.Submissions) {
		return true
	}

	return false
}

// SetSubmissions gets a reference to the given []SubmissionPreview and assigns it to the Submissions field.
func (o *SubmissionBatchWithSubmissions) SetSubmissions(v []SubmissionPreview) {
	o.Submissions = v
}

func (o SubmissionBatchWithSubmissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmissionBatchWithSubmissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	toSerialize["state"] = o.State
	toSerialize["metadata"] = o.Metadata
	toSerialize["processed_at"] = o.ProcessedAt.Get()
	toSerialize["total_count"] = o.TotalCount
	toSerialize["pending_count"] = o.PendingCount
	toSerialize["error_count"] = o.ErrorCount
	toSerialize["completion_percentage"] = o.CompletionPercentage
	if !IsNil(o.Submissions) {
		toSerialize["submissions"] = o.Submissions
	}
	return toSerialize, nil
}

func (o *SubmissionBatchWithSubmissions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"state",
		"metadata",
		"processed_at",
		"total_count",
		"pending_count",
		"error_count",
		"completion_percentage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmissionBatchWithSubmissions := _SubmissionBatchWithSubmissions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubmissionBatchWithSubmissions)

	if err != nil {
		return err
	}

	*o = SubmissionBatchWithSubmissions(varSubmissionBatchWithSubmissions)

	return err
}

type NullableSubmissionBatchWithSubmissions struct {
	value *SubmissionBatchWithSubmissions
	isSet bool
}

func (v NullableSubmissionBatchWithSubmissions) Get() *SubmissionBatchWithSubmissions {
	return v.value
}

func (v *NullableSubmissionBatchWithSubmissions) Set(val *SubmissionBatchWithSubmissions) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmissionBatchWithSubmissions) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmissionBatchWithSubmissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmissionBatchWithSubmissions(val *SubmissionBatchWithSubmissions) *NullableSubmissionBatchWithSubmissions {
	return &NullableSubmissionBatchWithSubmissions{value: val, isSet: true}
}

func (v NullableSubmissionBatchWithSubmissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmissionBatchWithSubmissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


