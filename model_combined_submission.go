/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CombinedSubmission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CombinedSubmission{}

// CombinedSubmission struct for CombinedSubmission
type CombinedSubmission struct {
	Id NullableString `json:"id"`
	State string `json:"state"`
	Expired bool `json:"expired"`
	ExpiresIn NullableInt32 `json:"expires_in"`
	ExpiresAt NullableString `json:"expires_at"`
	ProcessedAt NullableString `json:"processed_at"`
	ErrorMessage NullableString `json:"error_message"`
	SubmissionIds []string `json:"submission_ids"`
	SourcePdfs []map[string]interface{} `json:"source_pdfs"`
	Metadata map[string]interface{} `json:"metadata"`
	Password NullableString `json:"password"`
	PdfHash NullableString `json:"pdf_hash"`
	DownloadUrl NullableString `json:"download_url"`
	Actions []CombinedSubmissionAction `json:"actions"`
}

type _CombinedSubmission CombinedSubmission

// NewCombinedSubmission instantiates a new CombinedSubmission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCombinedSubmission(id NullableString, state string, expired bool, expiresIn NullableInt32, expiresAt NullableString, processedAt NullableString, errorMessage NullableString, submissionIds []string, sourcePdfs []map[string]interface{}, metadata map[string]interface{}, password NullableString, pdfHash NullableString, downloadUrl NullableString, actions []CombinedSubmissionAction) *CombinedSubmission {
	this := CombinedSubmission{}
	this.Id = id
	this.State = state
	this.Expired = expired
	this.ExpiresIn = expiresIn
	this.ExpiresAt = expiresAt
	this.ProcessedAt = processedAt
	this.ErrorMessage = errorMessage
	this.SubmissionIds = submissionIds
	this.SourcePdfs = sourcePdfs
	this.Metadata = metadata
	this.Password = password
	this.PdfHash = pdfHash
	this.DownloadUrl = downloadUrl
	this.Actions = actions
	return &this
}

// NewCombinedSubmissionWithDefaults instantiates a new CombinedSubmission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCombinedSubmissionWithDefaults() *CombinedSubmission {
	this := CombinedSubmission{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CombinedSubmission) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CombinedSubmission) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *CombinedSubmission) SetId(v string) {
	o.Id.Set(&v)
}

// GetState returns the State field value
func (o *CombinedSubmission) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CombinedSubmission) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CombinedSubmission) SetState(v string) {
	o.State = v
}

// GetExpired returns the Expired field value
func (o *CombinedSubmission) GetExpired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value
// and a boolean to check if the value has been set.
func (o *CombinedSubmission) GetExpiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expired, true
}

// SetExpired sets field value
func (o *CombinedSubmission) SetExpired(v bool) {
	o.Expired = v
}

// GetExpiresIn returns the ExpiresIn field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *CombinedSubmission) GetExpiresIn() int32 {
	if o == nil || o.ExpiresIn.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ExpiresIn.Get()
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CombinedSubmission) GetExpiresInOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresIn.Get(), o.ExpiresIn.IsSet()
}

// SetExpiresIn sets field value
func (o *CombinedSubmission) SetExpiresIn(v int32) {
	o.ExpiresIn.Set(&v)
}

// GetExpiresAt returns the ExpiresAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CombinedSubmission) GetExpiresAt() string {
	if o == nil || o.ExpiresAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CombinedSubmission) GetExpiresAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// SetExpiresAt sets field value
func (o *CombinedSubmission) SetExpiresAt(v string) {
	o.ExpiresAt.Set(&v)
}

// GetProcessedAt returns the ProcessedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CombinedSubmission) GetProcessedAt() string {
	if o == nil || o.ProcessedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.ProcessedAt.Get()
}

// GetProcessedAtOk returns a tuple with the ProcessedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CombinedSubmission) GetProcessedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessedAt.Get(), o.ProcessedAt.IsSet()
}

// SetProcessedAt sets field value
func (o *CombinedSubmission) SetProcessedAt(v string) {
	o.ProcessedAt.Set(&v)
}

// GetErrorMessage returns the ErrorMessage field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CombinedSubmission) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}

	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CombinedSubmission) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// SetErrorMessage sets field value
func (o *CombinedSubmission) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}

// GetSubmissionIds returns the SubmissionIds field value
func (o *CombinedSubmission) GetSubmissionIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SubmissionIds
}

// GetSubmissionIdsOk returns a tuple with the SubmissionIds field value
// and a boolean to check if the value has been set.
func (o *CombinedSubmission) GetSubmissionIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubmissionIds, true
}

// SetSubmissionIds sets field value
func (o *CombinedSubmission) SetSubmissionIds(v []string) {
	o.SubmissionIds = v
}

// GetSourcePdfs returns the SourcePdfs field value
func (o *CombinedSubmission) GetSourcePdfs() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.SourcePdfs
}

// GetSourcePdfsOk returns a tuple with the SourcePdfs field value
// and a boolean to check if the value has been set.
func (o *CombinedSubmission) GetSourcePdfsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourcePdfs, true
}

// SetSourcePdfs sets field value
func (o *CombinedSubmission) SetSourcePdfs(v []map[string]interface{}) {
	o.SourcePdfs = v
}

// GetMetadata returns the Metadata field value
func (o *CombinedSubmission) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *CombinedSubmission) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *CombinedSubmission) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetPassword returns the Password field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CombinedSubmission) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}

	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CombinedSubmission) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// SetPassword sets field value
func (o *CombinedSubmission) SetPassword(v string) {
	o.Password.Set(&v)
}

// GetPdfHash returns the PdfHash field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CombinedSubmission) GetPdfHash() string {
	if o == nil || o.PdfHash.Get() == nil {
		var ret string
		return ret
	}

	return *o.PdfHash.Get()
}

// GetPdfHashOk returns a tuple with the PdfHash field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CombinedSubmission) GetPdfHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PdfHash.Get(), o.PdfHash.IsSet()
}

// SetPdfHash sets field value
func (o *CombinedSubmission) SetPdfHash(v string) {
	o.PdfHash.Set(&v)
}

// GetDownloadUrl returns the DownloadUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CombinedSubmission) GetDownloadUrl() string {
	if o == nil || o.DownloadUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.DownloadUrl.Get()
}

// GetDownloadUrlOk returns a tuple with the DownloadUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CombinedSubmission) GetDownloadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadUrl.Get(), o.DownloadUrl.IsSet()
}

// SetDownloadUrl sets field value
func (o *CombinedSubmission) SetDownloadUrl(v string) {
	o.DownloadUrl.Set(&v)
}

// GetActions returns the Actions field value
func (o *CombinedSubmission) GetActions() []CombinedSubmissionAction {
	if o == nil {
		var ret []CombinedSubmissionAction
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *CombinedSubmission) GetActionsOk() ([]CombinedSubmissionAction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Actions, true
}

// SetActions sets field value
func (o *CombinedSubmission) SetActions(v []CombinedSubmissionAction) {
	o.Actions = v
}

func (o CombinedSubmission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CombinedSubmission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	toSerialize["state"] = o.State
	toSerialize["expired"] = o.Expired
	toSerialize["expires_in"] = o.ExpiresIn.Get()
	toSerialize["expires_at"] = o.ExpiresAt.Get()
	toSerialize["processed_at"] = o.ProcessedAt.Get()
	toSerialize["error_message"] = o.ErrorMessage.Get()
	toSerialize["submission_ids"] = o.SubmissionIds
	toSerialize["source_pdfs"] = o.SourcePdfs
	toSerialize["metadata"] = o.Metadata
	toSerialize["password"] = o.Password.Get()
	toSerialize["pdf_hash"] = o.PdfHash.Get()
	toSerialize["download_url"] = o.DownloadUrl.Get()
	toSerialize["actions"] = o.Actions
	return toSerialize, nil
}

func (o *CombinedSubmission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"state",
		"expired",
		"expires_in",
		"expires_at",
		"processed_at",
		"error_message",
		"submission_ids",
		"source_pdfs",
		"metadata",
		"password",
		"pdf_hash",
		"download_url",
		"actions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCombinedSubmission := _CombinedSubmission{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCombinedSubmission)

	if err != nil {
		return err
	}

	*o = CombinedSubmission(varCombinedSubmission)

	return err
}

type NullableCombinedSubmission struct {
	value *CombinedSubmission
	isSet bool
}

func (v NullableCombinedSubmission) Get() *CombinedSubmission {
	return v.value
}

func (v *NullableCombinedSubmission) Set(val *CombinedSubmission) {
	v.value = val
	v.isSet = true
}

func (v NullableCombinedSubmission) IsSet() bool {
	return v.isSet
}

func (v *NullableCombinedSubmission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCombinedSubmission(val *CombinedSubmission) *NullableCombinedSubmission {
	return &NullableCombinedSubmission{value: val, isSet: true}
}

func (v NullableCombinedSubmission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCombinedSubmission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


