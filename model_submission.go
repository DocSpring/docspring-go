/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Submission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Submission{}

// Submission struct for Submission
type Submission struct {
	BatchId NullableString `json:"batch_id"`
	DataRequests []SubmissionDataRequest `json:"data_requests"`
	Editable NullableBool `json:"editable"`
	Expired bool `json:"expired"`
	ExpiresAt NullableString `json:"expires_at"`
	Id NullableString `json:"id"`
	JsonSchemaErrors []string `json:"json_schema_errors"`
	Metadata map[string]interface{} `json:"metadata"`
	Password NullableString `json:"password"`
	ProcessedAt NullableString `json:"processed_at"`
	State string `json:"state"`
	TemplateId NullableString `json:"template_id"`
	Test bool `json:"test"`
	TruncatedText map[string]interface{} `json:"truncated_text"`
	PdfHash NullableString `json:"pdf_hash"`
	DownloadUrl NullableString `json:"download_url"`
	PermanentDownloadUrl NullableString `json:"permanent_download_url"`
	PreviewDownloadUrl NullableString `json:"preview_download_url"`
	PreviewGeneratedAt NullableString `json:"preview_generated_at"`
	AuditTrailDownloadUrl NullableString `json:"audit_trail_download_url"`
	Actions []SubmissionAction `json:"actions"`
	Source string `json:"source"`
	Referrer NullableString `json:"referrer"`
	Data map[string]interface{} `json:"data"`
}

type _Submission Submission

// NewSubmission instantiates a new Submission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmission(batchId NullableString, dataRequests []SubmissionDataRequest, editable NullableBool, expired bool, expiresAt NullableString, id NullableString, jsonSchemaErrors []string, metadata map[string]interface{}, password NullableString, processedAt NullableString, state string, templateId NullableString, test bool, truncatedText map[string]interface{}, pdfHash NullableString, downloadUrl NullableString, permanentDownloadUrl NullableString, previewDownloadUrl NullableString, previewGeneratedAt NullableString, auditTrailDownloadUrl NullableString, actions []SubmissionAction, source string, referrer NullableString, data map[string]interface{}) *Submission {
	this := Submission{}
	this.BatchId = batchId
	this.DataRequests = dataRequests
	this.Editable = editable
	this.Expired = expired
	this.ExpiresAt = expiresAt
	this.Id = id
	this.JsonSchemaErrors = jsonSchemaErrors
	this.Metadata = metadata
	this.Password = password
	this.ProcessedAt = processedAt
	this.State = state
	this.TemplateId = templateId
	this.Test = test
	this.TruncatedText = truncatedText
	this.PdfHash = pdfHash
	this.DownloadUrl = downloadUrl
	this.PermanentDownloadUrl = permanentDownloadUrl
	this.PreviewDownloadUrl = previewDownloadUrl
	this.PreviewGeneratedAt = previewGeneratedAt
	this.AuditTrailDownloadUrl = auditTrailDownloadUrl
	this.Actions = actions
	this.Source = source
	this.Referrer = referrer
	this.Data = data
	return &this
}

// NewSubmissionWithDefaults instantiates a new Submission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmissionWithDefaults() *Submission {
	this := Submission{}
	return &this
}

// GetBatchId returns the BatchId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetBatchId() string {
	if o == nil || o.BatchId.Get() == nil {
		var ret string
		return ret
	}

	return *o.BatchId.Get()
}

// GetBatchIdOk returns a tuple with the BatchId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetBatchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatchId.Get(), o.BatchId.IsSet()
}

// SetBatchId sets field value
func (o *Submission) SetBatchId(v string) {
	o.BatchId.Set(&v)
}

// GetDataRequests returns the DataRequests field value
func (o *Submission) GetDataRequests() []SubmissionDataRequest {
	if o == nil {
		var ret []SubmissionDataRequest
		return ret
	}

	return o.DataRequests
}

// GetDataRequestsOk returns a tuple with the DataRequests field value
// and a boolean to check if the value has been set.
func (o *Submission) GetDataRequestsOk() ([]SubmissionDataRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataRequests, true
}

// SetDataRequests sets field value
func (o *Submission) SetDataRequests(v []SubmissionDataRequest) {
	o.DataRequests = v
}

// GetEditable returns the Editable field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *Submission) GetEditable() bool {
	if o == nil || o.Editable.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Editable.Get()
}

// GetEditableOk returns a tuple with the Editable field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetEditableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Editable.Get(), o.Editable.IsSet()
}

// SetEditable sets field value
func (o *Submission) SetEditable(v bool) {
	o.Editable.Set(&v)
}

// GetExpired returns the Expired field value
func (o *Submission) GetExpired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value
// and a boolean to check if the value has been set.
func (o *Submission) GetExpiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expired, true
}

// SetExpired sets field value
func (o *Submission) SetExpired(v bool) {
	o.Expired = v
}

// GetExpiresAt returns the ExpiresAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetExpiresAt() string {
	if o == nil || o.ExpiresAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetExpiresAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// SetExpiresAt sets field value
func (o *Submission) SetExpiresAt(v string) {
	o.ExpiresAt.Set(&v)
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *Submission) SetId(v string) {
	o.Id.Set(&v)
}

// GetJsonSchemaErrors returns the JsonSchemaErrors field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *Submission) GetJsonSchemaErrors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.JsonSchemaErrors
}

// GetJsonSchemaErrorsOk returns a tuple with the JsonSchemaErrors field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetJsonSchemaErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.JsonSchemaErrors) {
		return nil, false
	}
	return o.JsonSchemaErrors, true
}

// SetJsonSchemaErrors sets field value
func (o *Submission) SetJsonSchemaErrors(v []string) {
	o.JsonSchemaErrors = v
}

// GetMetadata returns the Metadata field value
func (o *Submission) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Submission) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *Submission) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetPassword returns the Password field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}

	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// SetPassword sets field value
func (o *Submission) SetPassword(v string) {
	o.Password.Set(&v)
}

// GetProcessedAt returns the ProcessedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetProcessedAt() string {
	if o == nil || o.ProcessedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.ProcessedAt.Get()
}

// GetProcessedAtOk returns a tuple with the ProcessedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetProcessedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessedAt.Get(), o.ProcessedAt.IsSet()
}

// SetProcessedAt sets field value
func (o *Submission) SetProcessedAt(v string) {
	o.ProcessedAt.Set(&v)
}

// GetState returns the State field value
func (o *Submission) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Submission) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Submission) SetState(v string) {
	o.State = v
}

// GetTemplateId returns the TemplateId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetTemplateId() string {
	if o == nil || o.TemplateId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TemplateId.Get()
}

// GetTemplateIdOk returns a tuple with the TemplateId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetTemplateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateId.Get(), o.TemplateId.IsSet()
}

// SetTemplateId sets field value
func (o *Submission) SetTemplateId(v string) {
	o.TemplateId.Set(&v)
}

// GetTest returns the Test field value
func (o *Submission) GetTest() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Test
}

// GetTestOk returns a tuple with the Test field value
// and a boolean to check if the value has been set.
func (o *Submission) GetTestOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Test, true
}

// SetTest sets field value
func (o *Submission) SetTest(v bool) {
	o.Test = v
}

// GetTruncatedText returns the TruncatedText field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *Submission) GetTruncatedText() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.TruncatedText
}

// GetTruncatedTextOk returns a tuple with the TruncatedText field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetTruncatedTextOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TruncatedText) {
		return map[string]interface{}{}, false
	}
	return o.TruncatedText, true
}

// SetTruncatedText sets field value
func (o *Submission) SetTruncatedText(v map[string]interface{}) {
	o.TruncatedText = v
}

// GetPdfHash returns the PdfHash field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetPdfHash() string {
	if o == nil || o.PdfHash.Get() == nil {
		var ret string
		return ret
	}

	return *o.PdfHash.Get()
}

// GetPdfHashOk returns a tuple with the PdfHash field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetPdfHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PdfHash.Get(), o.PdfHash.IsSet()
}

// SetPdfHash sets field value
func (o *Submission) SetPdfHash(v string) {
	o.PdfHash.Set(&v)
}

// GetDownloadUrl returns the DownloadUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetDownloadUrl() string {
	if o == nil || o.DownloadUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.DownloadUrl.Get()
}

// GetDownloadUrlOk returns a tuple with the DownloadUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetDownloadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadUrl.Get(), o.DownloadUrl.IsSet()
}

// SetDownloadUrl sets field value
func (o *Submission) SetDownloadUrl(v string) {
	o.DownloadUrl.Set(&v)
}

// GetPermanentDownloadUrl returns the PermanentDownloadUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetPermanentDownloadUrl() string {
	if o == nil || o.PermanentDownloadUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.PermanentDownloadUrl.Get()
}

// GetPermanentDownloadUrlOk returns a tuple with the PermanentDownloadUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetPermanentDownloadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PermanentDownloadUrl.Get(), o.PermanentDownloadUrl.IsSet()
}

// SetPermanentDownloadUrl sets field value
func (o *Submission) SetPermanentDownloadUrl(v string) {
	o.PermanentDownloadUrl.Set(&v)
}

// GetPreviewDownloadUrl returns the PreviewDownloadUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetPreviewDownloadUrl() string {
	if o == nil || o.PreviewDownloadUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.PreviewDownloadUrl.Get()
}

// GetPreviewDownloadUrlOk returns a tuple with the PreviewDownloadUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetPreviewDownloadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreviewDownloadUrl.Get(), o.PreviewDownloadUrl.IsSet()
}

// SetPreviewDownloadUrl sets field value
func (o *Submission) SetPreviewDownloadUrl(v string) {
	o.PreviewDownloadUrl.Set(&v)
}

// GetPreviewGeneratedAt returns the PreviewGeneratedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetPreviewGeneratedAt() string {
	if o == nil || o.PreviewGeneratedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.PreviewGeneratedAt.Get()
}

// GetPreviewGeneratedAtOk returns a tuple with the PreviewGeneratedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetPreviewGeneratedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreviewGeneratedAt.Get(), o.PreviewGeneratedAt.IsSet()
}

// SetPreviewGeneratedAt sets field value
func (o *Submission) SetPreviewGeneratedAt(v string) {
	o.PreviewGeneratedAt.Set(&v)
}

// GetAuditTrailDownloadUrl returns the AuditTrailDownloadUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetAuditTrailDownloadUrl() string {
	if o == nil || o.AuditTrailDownloadUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.AuditTrailDownloadUrl.Get()
}

// GetAuditTrailDownloadUrlOk returns a tuple with the AuditTrailDownloadUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetAuditTrailDownloadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuditTrailDownloadUrl.Get(), o.AuditTrailDownloadUrl.IsSet()
}

// SetAuditTrailDownloadUrl sets field value
func (o *Submission) SetAuditTrailDownloadUrl(v string) {
	o.AuditTrailDownloadUrl.Set(&v)
}

// GetActions returns the Actions field value
func (o *Submission) GetActions() []SubmissionAction {
	if o == nil {
		var ret []SubmissionAction
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *Submission) GetActionsOk() ([]SubmissionAction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Actions, true
}

// SetActions sets field value
func (o *Submission) SetActions(v []SubmissionAction) {
	o.Actions = v
}

// GetSource returns the Source field value
func (o *Submission) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *Submission) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *Submission) SetSource(v string) {
	o.Source = v
}

// GetReferrer returns the Referrer field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Submission) GetReferrer() string {
	if o == nil || o.Referrer.Get() == nil {
		var ret string
		return ret
	}

	return *o.Referrer.Get()
}

// GetReferrerOk returns a tuple with the Referrer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetReferrerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Referrer.Get(), o.Referrer.IsSet()
}

// SetReferrer sets field value
func (o *Submission) SetReferrer(v string) {
	o.Referrer.Set(&v)
}

// GetData returns the Data field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *Submission) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Submission) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *Submission) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o Submission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Submission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["batch_id"] = o.BatchId.Get()
	toSerialize["data_requests"] = o.DataRequests
	toSerialize["editable"] = o.Editable.Get()
	toSerialize["expired"] = o.Expired
	toSerialize["expires_at"] = o.ExpiresAt.Get()
	toSerialize["id"] = o.Id.Get()
	if o.JsonSchemaErrors != nil {
		toSerialize["json_schema_errors"] = o.JsonSchemaErrors
	}
	toSerialize["metadata"] = o.Metadata
	toSerialize["password"] = o.Password.Get()
	toSerialize["processed_at"] = o.ProcessedAt.Get()
	toSerialize["state"] = o.State
	toSerialize["template_id"] = o.TemplateId.Get()
	toSerialize["test"] = o.Test
	if o.TruncatedText != nil {
		toSerialize["truncated_text"] = o.TruncatedText
	}
	toSerialize["pdf_hash"] = o.PdfHash.Get()
	toSerialize["download_url"] = o.DownloadUrl.Get()
	toSerialize["permanent_download_url"] = o.PermanentDownloadUrl.Get()
	toSerialize["preview_download_url"] = o.PreviewDownloadUrl.Get()
	toSerialize["preview_generated_at"] = o.PreviewGeneratedAt.Get()
	toSerialize["audit_trail_download_url"] = o.AuditTrailDownloadUrl.Get()
	toSerialize["actions"] = o.Actions
	toSerialize["source"] = o.Source
	toSerialize["referrer"] = o.Referrer.Get()
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *Submission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"batch_id",
		"data_requests",
		"editable",
		"expired",
		"expires_at",
		"id",
		"json_schema_errors",
		"metadata",
		"password",
		"processed_at",
		"state",
		"template_id",
		"test",
		"truncated_text",
		"pdf_hash",
		"download_url",
		"permanent_download_url",
		"preview_download_url",
		"preview_generated_at",
		"audit_trail_download_url",
		"actions",
		"source",
		"referrer",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmission := _Submission{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubmission)

	if err != nil {
		return err
	}

	*o = Submission(varSubmission)

	return err
}

type NullableSubmission struct {
	value *Submission
	isSet bool
}

func (v NullableSubmission) Get() *Submission {
	return v.value
}

func (v *NullableSubmission) Set(val *Submission) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmission) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmission(val *Submission) *NullableSubmission {
	return &NullableSubmission{value: val, isSet: true}
}

func (v NullableSubmission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


