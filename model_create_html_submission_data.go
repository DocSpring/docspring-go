/*
DocSpring API

DocSpring provides an API that helps you fill out and sign PDF templates.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package docspring

import (
	"encoding/json"
)

// checks if the CreateHtmlSubmissionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateHtmlSubmissionData{}

// CreateHtmlSubmissionData struct for CreateHtmlSubmissionData
type CreateHtmlSubmissionData struct {
	Css *string `json:"css,omitempty"`
	Data map[string]interface{} `json:"data,omitempty"`
	Editable *bool `json:"editable,omitempty"`
	ExpiresIn *int32 `json:"expires_in,omitempty"`
	FieldOverrides map[string]interface{} `json:"field_overrides,omitempty"`
	Html *string `json:"html,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Password *string `json:"password,omitempty"`
	Test *bool `json:"test,omitempty"`
}

// NewCreateHtmlSubmissionData instantiates a new CreateHtmlSubmissionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateHtmlSubmissionData() *CreateHtmlSubmissionData {
	this := CreateHtmlSubmissionData{}
	return &this
}

// NewCreateHtmlSubmissionDataWithDefaults instantiates a new CreateHtmlSubmissionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateHtmlSubmissionDataWithDefaults() *CreateHtmlSubmissionData {
	this := CreateHtmlSubmissionData{}
	return &this
}

// GetCss returns the Css field value if set, zero value otherwise.
func (o *CreateHtmlSubmissionData) GetCss() string {
	if o == nil || IsNil(o.Css) {
		var ret string
		return ret
	}
	return *o.Css
}

// GetCssOk returns a tuple with the Css field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHtmlSubmissionData) GetCssOk() (*string, bool) {
	if o == nil || IsNil(o.Css) {
		return nil, false
	}
	return o.Css, true
}

// HasCss returns a boolean if a field has been set.
func (o *CreateHtmlSubmissionData) HasCss() bool {
	if o != nil && !IsNil(o.Css) {
		return true
	}

	return false
}

// SetCss gets a reference to the given string and assigns it to the Css field.
func (o *CreateHtmlSubmissionData) SetCss(v string) {
	o.Css = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CreateHtmlSubmissionData) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHtmlSubmissionData) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CreateHtmlSubmissionData) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *CreateHtmlSubmissionData) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *CreateHtmlSubmissionData) GetEditable() bool {
	if o == nil || IsNil(o.Editable) {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHtmlSubmissionData) GetEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.Editable) {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *CreateHtmlSubmissionData) HasEditable() bool {
	if o != nil && !IsNil(o.Editable) {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *CreateHtmlSubmissionData) SetEditable(v bool) {
	o.Editable = &v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *CreateHtmlSubmissionData) GetExpiresIn() int32 {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret int32
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHtmlSubmissionData) GetExpiresInOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *CreateHtmlSubmissionData) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int32 and assigns it to the ExpiresIn field.
func (o *CreateHtmlSubmissionData) SetExpiresIn(v int32) {
	o.ExpiresIn = &v
}

// GetFieldOverrides returns the FieldOverrides field value if set, zero value otherwise.
func (o *CreateHtmlSubmissionData) GetFieldOverrides() map[string]interface{} {
	if o == nil || IsNil(o.FieldOverrides) {
		var ret map[string]interface{}
		return ret
	}
	return o.FieldOverrides
}

// GetFieldOverridesOk returns a tuple with the FieldOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHtmlSubmissionData) GetFieldOverridesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FieldOverrides) {
		return map[string]interface{}{}, false
	}
	return o.FieldOverrides, true
}

// HasFieldOverrides returns a boolean if a field has been set.
func (o *CreateHtmlSubmissionData) HasFieldOverrides() bool {
	if o != nil && !IsNil(o.FieldOverrides) {
		return true
	}

	return false
}

// SetFieldOverrides gets a reference to the given map[string]interface{} and assigns it to the FieldOverrides field.
func (o *CreateHtmlSubmissionData) SetFieldOverrides(v map[string]interface{}) {
	o.FieldOverrides = v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *CreateHtmlSubmissionData) GetHtml() string {
	if o == nil || IsNil(o.Html) {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHtmlSubmissionData) GetHtmlOk() (*string, bool) {
	if o == nil || IsNil(o.Html) {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *CreateHtmlSubmissionData) HasHtml() bool {
	if o != nil && !IsNil(o.Html) {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *CreateHtmlSubmissionData) SetHtml(v string) {
	o.Html = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CreateHtmlSubmissionData) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHtmlSubmissionData) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CreateHtmlSubmissionData) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *CreateHtmlSubmissionData) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *CreateHtmlSubmissionData) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHtmlSubmissionData) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *CreateHtmlSubmissionData) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *CreateHtmlSubmissionData) SetPassword(v string) {
	o.Password = &v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *CreateHtmlSubmissionData) GetTest() bool {
	if o == nil || IsNil(o.Test) {
		var ret bool
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHtmlSubmissionData) GetTestOk() (*bool, bool) {
	if o == nil || IsNil(o.Test) {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *CreateHtmlSubmissionData) HasTest() bool {
	if o != nil && !IsNil(o.Test) {
		return true
	}

	return false
}

// SetTest gets a reference to the given bool and assigns it to the Test field.
func (o *CreateHtmlSubmissionData) SetTest(v bool) {
	o.Test = &v
}

func (o CreateHtmlSubmissionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateHtmlSubmissionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Css) {
		toSerialize["css"] = o.Css
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Editable) {
		toSerialize["editable"] = o.Editable
	}
	if !IsNil(o.ExpiresIn) {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	if !IsNil(o.FieldOverrides) {
		toSerialize["field_overrides"] = o.FieldOverrides
	}
	if !IsNil(o.Html) {
		toSerialize["html"] = o.Html
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Test) {
		toSerialize["test"] = o.Test
	}
	return toSerialize, nil
}

type NullableCreateHtmlSubmissionData struct {
	value *CreateHtmlSubmissionData
	isSet bool
}

func (v NullableCreateHtmlSubmissionData) Get() *CreateHtmlSubmissionData {
	return v.value
}

func (v *NullableCreateHtmlSubmissionData) Set(val *CreateHtmlSubmissionData) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateHtmlSubmissionData) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateHtmlSubmissionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateHtmlSubmissionData(val *CreateHtmlSubmissionData) *NullableCreateHtmlSubmissionData {
	return &NullableCreateHtmlSubmissionData{value: val, isSet: true}
}

func (v NullableCreateHtmlSubmissionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateHtmlSubmissionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


